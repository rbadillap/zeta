{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "registry-nextjs",
  "type": "registry:block",
  "title": "Zeta Registry",
  "description": "This block contains contains all the necessary files and configurations to serve and manage a shadcn/ui component registry, including API protection, and more features.",
  "dependencies": [
    "shadcn",
    "lucide-react",
    "zod",
    "@hookform/resolvers",
    "react-hook-form"
  ],
  "registryDependencies": [
    "sonner",
    "button",
    "card",
    "input",
    "form"
  ],
  "files": [
    {
      "path": "app/(registry)/registry/[name]/route.ts",
      "content": "import { NextResponse } from \"next/server\"\nimport path from \"path\"\nimport { promises as fs } from \"fs\"\nimport { registryItemSchema } from \"shadcn/registry\"\n\n// Use the registry.json file to generate static paths.\nexport const generateStaticParams = async () => {\n  const registryData = await import(\"@/registry.json\");\n  const registry = registryData.default;\n\n  return registry.items.map((item) => ({\n    name: item.name,\n  }));\n};\n\n// This route shows an example for serving a component using a route handler.\nexport async function GET(\n  request: Request,\n  { params }: { params: Promise<{ name: string }> }\n) {\n  try {\n    const { name } = await params\n\n    // Cache the registry import\n    const registryData = await import(\"@/registry.json\")\n    const registry = registryData.default\n\n    // Find the component from the registry.\n    const component = registry.items.find((c) => c.name === name)\n\n    // If the component is not found, return a 404 error.\n    if (!component) {\n      return NextResponse.json(\n        { error: \"Component not found\" },\n        { status: 404 }\n      )\n    }\n\n    // Validate before file operations.\n    const registryItem = registryItemSchema.parse(component)\n\n    // If the component has no files, return a 400 error.\n    if (!registryItem.files?.length) {\n      return NextResponse.json(\n        { error: \"Component has no files\" },\n        { status: 400 }\n      )\n    }\n\n    // Read all files in parallel.\n    const filesWithContent = await Promise.all(\n      registryItem.files.map(async (file) => {\n        const filePath = path.join(process.cwd(), file.path)\n        const content = await fs.readFile(filePath, \"utf8\")\n        return { ...file, content }\n      })\n    )\n\n    // Return the component with the files.\n    return NextResponse.json({ ...registryItem, files: filesWithContent })\n  } catch (error) {\n    console.error(\"Error processing component request:\", error)\n    return NextResponse.json({ error: \"Something went wrong\" }, { status: 500 })\n  }\n}\n",
      "type": "registry:file",
      "target": "app/registry/[name]/route.ts"
    },
    {
      "path": "app/(registry)/registry/access/validate-license/page.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\n// import Logo from \"@/components/logos\"\nimport { ValidateLicenseForm } from \"@/components/validate-license-form\"\nimport { toast } from \"sonner\"\nimport { TerminalCommandCopy } from \"@/components/terminal-command-copy\"\n\nfunction PolarLogo(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg viewBox=\"0 0 300 300\" fill=\"none\" {...props}>\n      <g clipPath=\"url(#clip0_1_10)\">\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M66.4284 274.26C134.876 320.593 227.925 302.666 274.258 234.219C320.593 165.771 302.666 72.7222 234.218 26.3885C165.77 -19.9451 72.721 -2.0181 26.3872 66.4297C-19.9465 134.877 -2.01939 227.927 66.4284 274.26ZM47.9555 116.67C30.8374 169.263 36.5445 221.893 59.2454 256.373C18.0412 217.361 7.27562 150.307 36.9436 92.318C55.9151 55.2362 87.5664 29.3937 122.5 18.3483C90.5911 36.7105 62.5549 71.8144 47.9555 116.67ZM175.347 283.137C211.377 272.606 244.211 246.385 263.685 208.322C293.101 150.825 282.768 84.4172 242.427 45.2673C264.22 79.7626 269.473 131.542 252.631 183.287C237.615 229.421 208.385 265.239 175.347 283.137ZM183.627 266.229C207.945 245.418 228.016 210.604 236.935 168.79C251.033 102.693 232.551 41.1978 195.112 20.6768C214.97 47.3945 225.022 99.2902 218.824 157.333C214.085 201.724 200.814 240.593 183.627 266.229ZM63.7177 131.844C49.5155 198.43 68.377 260.345 106.374 280.405C85.9962 254.009 75.5968 201.514 81.8758 142.711C86.5374 99.0536 99.4503 60.737 116.225 35.0969C92.2677 55.983 72.5384 90.4892 63.7177 131.844ZM199.834 149.561C200.908 217.473 179.59 272.878 152.222 273.309C124.853 273.742 101.797 219.039 100.724 151.127C99.6511 83.2138 120.968 27.8094 148.337 27.377C175.705 26.9446 198.762 81.648 199.834 149.561Z\" fill=\"white\"/>\n      </g>\n      <defs>\n      <clipPath id=\"clip0_1_10\">\n      <rect width=\"300\" height=\"300\" fill=\"white\"/>\n      </clipPath>\n      </defs>\n    </svg>\n  }\n}\n\nexport default function ValidateLicensePage() {\n  const [isLicenseValid, setIsLicenseValid] = React.useState(false)\n  const [token, setToken] = React.useState<string | null>(null)\n\n  async function handleSubmit(data: { licenseKey: string }) {\n    try {\n      const res = await fetch(\"/registry/api/validate-license\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ licenseKey: data.licenseKey })\n      })\n      const result = await res.json()\n      if (res.ok && result.valid && result.token) {\n        setToken(result.token)\n        setIsLicenseValid(true)\n        toast.success(\"License key validated successfully.\")\n      } else {\n        toast.error(result.error || \"Invalid license key.\")\n      }\n    } catch (error) {\n      toast.error((error as Error).message || \"Unexpected error.\")\n    }\n  }\n\n  return (\n    <main className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background/80 to-muted/60 p-4\">\n      <section className=\"w-full flex flex-col items-center gap-6\">\n        {!isLicenseValid ? (\n          <ValidateLicenseForm \n            className=\"w-full max-w-md\"\n            logo={<PolarLogo className=\"w-8 h-8 rounded opacity-80 group-hover:opacity-100 transition\" />} \n            onSubmit={handleSubmit}\n          />\n        ) : (\n          <TerminalCommandCopy \n            className=\"w-full max-w-md\"\n            command={`pnpm dlx shadcn add https://zeta-registry.vercel.app/logo?token=${token}`}\n          />\n        )}\n      </section>\n    </main>\n  )\n} ",
      "type": "registry:page",
      "target": "app/registry/access/validate-license/page.tsx"
    },
    {
      "path": "app/(registry)/registry/api/validate-license/route.ts",
      "content": "import { NextRequest, NextResponse } from \"next/server\"\nimport { validateLicenseKey } from \"@/lib/polar/client\"\nimport { generateToken } from \"@/lib/shadcn/registry/utils\"\n\ninterface ValidateLicenseRequest {\n  licenseKey: string\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = (await req.json()) as ValidateLicenseRequest\n    const { licenseKey } = body\n\n    // Real validation with Polar\n    const result = await validateLicenseKey(licenseKey)\n\n    // If there is an error in the Polar client response\n    if ('error' in result) {\n      return NextResponse.json({ valid: false, error: result.error }, { status: 400 })\n    }\n\n    // Consider valid if status is \"granted\"\n    if (result.status === \"granted\") {\n      const token = await generateToken()\n      return NextResponse.json({ valid: true, token })\n    }\n\n    return NextResponse.json({ valid: false, error: \"Invalid license key.\" }, { status: 400 })\n  } catch (error) {\n    return NextResponse.json({ valid: false, error: (error as Error).message || \"Malformed request.\" }, { status: 400 })\n  }\n} ",
      "type": "registry:file",
      "target": "app/registry/api/validate-license/route.ts"
    },
    {
      "path": "components/terminal-command-copy.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { toast } from \"sonner\"\nimport Logo from \"@/components/logos\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from \"@/components/ui/card\"\nimport { cn } from \"@/lib/utils\"\nimport { Check, Copy } from \"lucide-react\"\n\ninterface TerminalCommandCopyProps {\n  logo?: React.ReactNode\n  className?: string\n  command?: string\n}\n\nexport function TerminalCommandCopy({\n  logo = <Logo name=\"shadcn\" className=\"w-8 h-8 rounded opacity-80 group-hover:opacity-100 transition\" />, \n  className, \n  command = \"https://zeta-registry.vercel.app/registry/logo?token=<token>\"\n}: TerminalCommandCopyProps) {\n  const [isCopied, setIsCopied] = React.useState(false)\n\n  async function handleCopy() {\n    try {\n      await navigator.clipboard.writeText(command)\n      setIsCopied(true)\n      toast.success(\"Command copied to clipboard!\")\n      setTimeout(() => setIsCopied(false), 1500)\n    } catch {\n      toast.error(\"Failed to copy command\")\n    }\n  }\n\n  return (\n    <div className={cn(\"flex items-center justify-center min-h-[40vh]\", className)}>\n      <Card className=\"w-full border-none shadow-xl bg-background/90 dark:bg-background/80 backdrop-blur rounded-2xl\">\n        <CardHeader className=\"flex flex-col items-center gap-2 pb-0\">\n          {logo && (\n            <span className=\"rounded-full bg-primary/10 p-3 shadow mb-2\">\n              {logo}\n            </span>\n          )}\n          <CardTitle className=\"text-xl font-semibold text-center tracking-tight\">Install with your access token</CardTitle>\n          <CardDescription className=\"text-center text-muted-foreground text-sm\">Copy and run this command in your terminal to install your private component. This access token is expirable.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"pt-4\">\n          <div className=\"flex items-center gap-2 bg-muted rounded-lg px-3 py-2 border border-border font-mono overflow-x-auto\">\n            <span className=\"flex-1 text-xs md:text-sm select-all break-all\">\n              {command}\n            </span>\n            <Button\n              type=\"button\"\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"ml-2 text-muted-foreground hover:text-primary\"\n              onClick={handleCopy}\n              aria-label=\"Copy command\"\n            >\n              {isCopied ? <Check className=\"size-4\" /> : <Copy className=\"size-4\" />}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default TerminalCommandCopy ",
      "type": "registry:component",
      "target": "components/terminal-command-copy.tsx"
    },
    {
      "path": "components/validate-license-form.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { z } from \"zod\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Form,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormMessage\n} from \"@/components/ui/form\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter\n} from \"@/components/ui/card\"\nimport { KeyRound, Eye, EyeOff } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst validateSchema = z.object({\n  licenseKey: z.string().min(1, { message: \"License key is required.\" })\n})\ninterface ValidateFormData {\n  licenseKey: string\n}\n\ninterface ValidateLicenseFormProps {\n  logo?: React.ReactNode\n  className?: string\n  onSubmit: (data: ValidateFormData) => void | Promise<void>\n  description?: React.ReactNode\n}\n\nexport function ValidateLicenseForm({ logo, className, description, onSubmit }: ValidateLicenseFormProps) {\n  const [showKey, setShowKey] = React.useState(false)\n  const form = useForm<ValidateFormData>({\n    resolver: zodResolver(validateSchema),\n    defaultValues: { licenseKey: \"\" }\n  })\n\n  return (\n    <div className={cn(\"flex items-center justify-center min-h-[60vh]\", className)}>\n      <Card className=\"w-full border-none shadow-xl bg-background/90 dark:bg-background/80 backdrop-blur rounded-2xl\">\n        <CardHeader className=\"flex flex-col items-center gap-2 pb-0\">\n          {logo && (\n            <span className=\"rounded-full bg-primary/10 p-3 shadow mb-2\">\n              {logo}\n            </span>\n          )}\n          <CardTitle className=\"text-xl font-semibold text-center tracking-tight\">Enter your key</CardTitle>\n          <CardDescription className=\"text-center text-muted-foreground text-sm\">\n            {description}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"pt-4\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"licenseKey\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>License Key</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <KeyRound className=\"absolute left-3 top-1/2 -translate-y-1/2 size-4 text-muted-foreground\" />\n                        <Input\n                          type={showKey ? \"text\" : \"password\"}\n                          autoComplete=\"off\"\n                          placeholder=\"Enter your key\"\n                          className=\"pl-10 pr-10 text-base bg-background/80 border border-border focus:ring-2 focus:ring-primary/30 transition\"\n                          {...field}\n                        />\n                        <button\n                          type=\"button\"\n                          tabIndex={-1}\n                          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-primary transition\"\n                          onClick={() => setShowKey((v) => !v)}\n                          aria-label={showKey ? \"Hide product key\" : \"Show product key\"}\n                        >\n                          {showKey ? <EyeOff className=\"size-4\" /> : <Eye className=\"size-4\" />}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                size=\"sm\"\n                className=\"w-full\"\n                disabled={form.formState.isSubmitting}\n              >\n                {form.formState.isSubmitting ? \"Checking...\" : \"Continue\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n        <CardFooter className=\"flex justify-center pt-2\">\n          <span className=\"text-xs text-muted-foreground\">Powered by <span className=\"font-semibold\">Polar</span></span>\n        </CardFooter>\n      </Card>\n    </div>\n  )\n}\n\nexport default ValidateLicenseForm ",
      "type": "registry:component",
      "target": "components/validate-license-form.tsx"
    },
    {
      "path": "hooks/use-copy-to-clipboard.ts",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nexport function useCopyToClipboard({\n  timeout = 2000,\n  onCopy,\n}: {\n  timeout?: number\n  onCopy?: () => void\n} = {}) {\n  const [isCopied, setIsCopied] = React.useState(false)\n\n  const copyToClipboard = (value: string) => {\n    if (typeof window === \"undefined\" || !navigator.clipboard.writeText) {\n      return\n    }\n\n    if (!value) return\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true)\n\n      if (onCopy) {\n        onCopy()\n      }\n\n      setTimeout(() => {\n        setIsCopied(false)\n      }, timeout)\n    }, console.error)\n  }\n\n  return { isCopied, copyToClipboard }\n}",
      "type": "registry:hook",
      "target": "hooks/use-copy-to-clipboard.ts"
    }
  ]
}